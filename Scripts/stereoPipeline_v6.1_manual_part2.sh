#!/bin/bash
set -e

if [[ $# -lt 12 ]];then
    echo "usage: sh $0 -SN -countDir -registJson -speciesName -tissueType -outDir -imageRecordFile -imageCompressedFile -doCellBin -threads -sif
    -SN : sample id
    -countDir : output directory of count result
    -registJson : manual registration json file
    -speciesName : specie of the sample
    -tissueType : tissue type of the sample
    -outDir : output directory path
    -imageRecordFile : image file(*.ipr) generated by ImageStudio software
    -imageCompressedFile : image file(*.tar.gz) generated by ImageStudio software
    -doCellBin : [Y/N]
    -threads : the number of threads to be used in running the pipeline
    -sif : the file format of the visual software
    "
    exit
fi

while [[ -n "$1" ]]
do
    case "$1" in
        -SN) SN="$2"
            shift ;;
        -countDir) countDir="$2"
            shift ;;
        -registJson) registJson="$2"
            shift ;;
        -speciesName) refName="$2"
            shift ;;
        -tissueType) tissueType="$2"
            shift ;;
        -outDir) outDir="$2"
            shift ;;
        -imageRecordFile) iprFile="$2"
            shift ;;
        -imageCompressedFile) imageTarFile="$2"
            shift ;;
        -doCellBin) doCell="$2"
            shift ;;
        -threads) threads="$2"
            shift ;;
        -sif) sif="$2"
            shift ;;
    esac
        shift
done

# Another option of extracting parameters
offsetX=`cat ${registJson} | sed 's/,/\n/g' | grep "offsetX" | sed 's/:/\n/g' | sed '1d' | sed 's/}//g'|sed 's/"//g'`
offsetY=`cat ${registJson} | sed 's/,/\n/g' | grep "offsetY" | sed 's/:/\n/g' | sed '1d' | sed 's/}//g'|sed 's/"//g'`
flip=`cat ${registJson} | sed 's/,/\n/g' | grep "flip" | sed 's/:/\n/g' | sed '1d' | sed 's/}//g'|sed 's/"//g'`
rotate=`cat ${registJson} | sed 's/,/\n/g' | grep "rotate" | sed 's/:/\n/g' | sed '1d' | sed 's/}//g'|sed 's/"//g'`
isTunedStr=`cat ${registJson} | sed 's/,/\n/g' | grep "isTuned" | sed 's/:/\n/g' | sed '1d' | sed 's/}//g'|sed 's/"//g'`
extrude_x=`cat ${registJson} | sed 's/,/\n/g' | grep "extrude_x" | sed 's/:/\n/g' | sed '1d' | sed 's/}//g'|sed 's/"//g'`
extrude_y=`cat ${registJson} | sed 's/,/\n/g' | grep "extrude_y" | sed 's/:/\n/g' | sed '1d' | sed 's/}//g'|sed 's/"//g'`

if [[ isTunedStr == 'true' ]];then isTuned='True';else isTuned='False';fi


# Summary of count result
barcodeReadsCounts=${countDir}/01.merge/${SN}.merge.barcodeReadsCount.txt
starBams=()
bcStat=()
bcFinalOut=()
bcReadsCounts=()

for bam in `find $countDir -name \*.Aligned.sortedByCoord.out.bam`;do starBams[${#starBams[@]}]=$bam;done
for cidstat in `find $countDir -name \*CIDMap.stat`;do bcStat[${#bcStat[@]}]=$cidstat;done
for logfinalout in `find $countDir -name \*.Log.final.out`;do bcFinalOut[${#bcFinalOut[@]}]=$logfinalout;done
for bccount in `find $countDir -name \*barcodeReadsCount.txt`;do bcReadsCounts[${#bcReadsCounts[@]}]=$bccount;done

if [[ $(echo ${#bcReadsCounts[*]}) == '1' ]]; then
    bcReadsCountsStr=$bcReadsCounts
    starBamsStr=${starBams[0]}
    bcFinalOutStr=${bcFinalOut[0]}
    bcStatStr=${bcStat[0]}
else
    bcReadsCountsStr=$( IFS=','; echo "${bcReadsCounts[*]}" )
    starBamsStr=$( IFS=','; echo "${starBams[*]}" )
    bcFinalOutStr=$( IFS=','; echo "${bcFinalOut[*]}" )
    bcStatStr=$( IFS=','; echo "${bcStat[*]}" )
fi

# Software check
if [ `command -v singularity` ]
then
    singularityPath=`command -v singularity`
    echo `date` " singularity check: pass, and singularity path is ${singularityPath}"
else
    echo `date` " singularity check: singularity does not exits, please verify that you have installed singularity and exported it to your system PATH variable"
    exit
fi

if [[ -n $sif ]]
then
    echo `date` " singularity image file check: file exist and SIF path is ${sif}"
else
    echo `date` " singularity image file check: file does not exist, please double check your SIF file is in the current directory or the path given by the option -s is valid."
fi


if [[ ! -d $outDir ]];then
    mkdir -p $outDir
fi

# Get basic information

if [[ $iprFile ]] && [[ $imageTarFile ]];then
    iprDIR=$(dirname $iprFile)
    imgTarDIR=$(dirname $imageTarFile)
fi

# Prepare output directories
result_03register=${outDir}/03.register
result_04tissuecut=${outDir}/04.tissuecut
result_05spatialcluster=${outDir}/05.spatialcluster
result_06saturation=${outDir}/06.saturation
result_07report=${outDir}/07.report
result_visualization=${outDir}/visualization
arr_result=( $result_04tissuecut $result_05spatialcluster $result_06saturation $result_07report $result_visualization)
for each in "${arr_result[@]}";
do
    mkdir -p $each
done


if [[ ! -d $result_03register ]];then
    mkdir -p $result_03register
fi

if [[ $doCell == "Y" ]]; then
    result_041cellcut=${outDir}/041.cellcut
    result_051cellcluster=${outDir}/051.cellcluster
    mkdir -p $result_041cellcut
    mkdir -p $result_051cellcluster
fi

# Get origin TIFF path, either QCPass or QCFail
if [[ ! -d $countDir/03.register/manual_register ]];then
    tifDir=$countDir/03.register
else
	tifDir=$countDir/03.register/manual_register
fi


## Run SAW register to stitch microscope tile images to a panoramic image, perform tissue and cell (optional, depends on -doCellBin) segmentation, and register the panoramic image and the segmentated images with the gene expression matrix.
geneExp=$countDir/02.count/${SN}.raw.gef
if [[ -f $imageTarFile ]] && [[ -f $iprFile ]]  && [[ $doCell == "Y" ]]; then
    # Run SAW register (stitch, tissue segmentation, cell segmentation) + SAW imageTools
    echo `date` "=> image processing and registration start......."
    export HDF5_USE_FILE_LOCKING=FALSE
    imgTarDIR=$(dirname $imageTarFile)
    iprDIR=$(dirname $iprFile)
    export SINGULARITY_BIND=$outDir,$imgTarDIR,$iprDIR,$countDir
    cp -rf ${iprFile} ${result_03register}/${SN}.reregist.ipr
    /usr/bin/time -v singularity exec ${sif} manualRegister \
			-i $tifDir \
			-c ${result_03register}/${SN}.reregist.ipr \
			-v ${geneExp} \
			-f $flip \
			-r $rotate \
			-o $offsetX $offsetY \
			-s $extrude_x $extrude_y \
			-a $isTuned \
			-p ${result_03register}
    out_iprFile=$(find ${result_03register} -maxdepth 1 -name \*.ipr | head -1)
    /usr/bin/time -v singularity exec ${sif} imageTools ipr2img \
            -i ${imageTarFile} \
            -c ${out_iprFile} \
            -d tissue cell \
            -r True \
            -o ${result_03register}

    # registerTif=$(find ${result_03register} -maxdepth 1 -name \*fov_stitched.tif)
    # regTifStr=$(echo $registerTif | tr ' ' ',')
    # regGroupStr=$(basename `find ${result_03register} -maxdepth 1 -name \*fov_stitched.tif` | grep -v IF | awk -F '_' '{print$1}')
    # echo $regTifStr
    # echo $regGroupStr
    # /usr/bin/time -v singularity exec ${sif} imageTools img2rpi \
        # -i ${regTifStr} \
        # -g ${regGroupStr}/Image \
        # -b 1 10 50 100 \
        # -o ${result_03register}/fov_stitched.rpi

elif [[ -f $imageTarFile ]] && [[ -f $iprFile ]]  && [[ $doCell == "N" ]]; then
    # Run SAW rapidRegister (stitch, tissue segmentation) + SAW imageTools
    echo `date` "=> image processing and registration start......."
    export HDF5_USE_FILE_LOCKING=FALSE
    imgTarDIR=$(dirname $imageTarFile)
    iprDIR=$(dirname $iprFile)

    export SINGULARITY_BIND=$outDir,$imgTarDIR,$iprDIR,$countDir
    cp -rf ${iprFile} ${result_03register}/${SN}.reregist.ipr
    /usr/bin/time -v singularity exec ${sif} manualRegister \
            -i $tifDir \
            -c ${result_03register}/${SN}.reregist.ipr \
            -v ${geneExp} \
            -f $flip \
            -r $rotate \
            -o $offsetX $offsetY \
            -s $extrude_x $extrude_y \
            -a $isTuned \
            -p ${result_03register}

    out_iprFile=$(find ${result_03register} -maxdepth 1 -name \*.ipr | head -1)
    /usr/bin/time -v singularity exec ${sif} imageTools ipr2img \
            -i ${imageTarFile} \
            -c $out_iprFile \
            -d tissue \
            -r True \
            -o ${result_03register}

    # registerTif=$(find ${result_03register} -maxdepth 1 -name \*fov_stitched.tif)
    # regTifStr=$(echo $registerTif | tr ' ' ',')
    # regGroupStr=$(basename `find ${result_03register} -maxdepth 1 -name \*fov_stitched.tif` | grep -v IF | awk -F '_' '{print$1}')
    # echo $regTifStr
    # echo $regGroupStr
    # /usr/bin/time -v singularity exec ${sif} imageTools img2rpi \
        # -i ${regTifStr} \
        # -g ${regGroupStr}/Image \
        # -b 1 10 50 100 \
        # -o ${result_03register}/fov_stitched.rpi
fi

# Run SAW tissueCut

if [[ -f $imageTarFile ]] && [[ -f $iprFile ]]; then
    # Run tissueCut to get the spatial gene expression profile of the tissue-covered region
    #nucleusLayer=$(find ${result_03register} -maxdepth 1 -name \*fov_stitched_transformed.tif -exec sh -c 'for f do basename -- "$f" _fov_stitched_transformed.tif;done' sh {} + | grep -v IF)
    nucleusLayer=$(basename `find ${result_03register} -name \*fov_stitched*.tif` | grep -v IF | awk -F '_' '{print$1}')
    tissueMaskFile=$(find ${result_03register} -name \*${nucleusLayer}_${SN}_tissue_cut.tif)
    echo `date` "=> tissueCut start......."
    export HDF5_USE_FILE_LOCKING=FALSE
    export SINGULARITY_BIND=$outDir,$countDir
    /usr/bin/time -v singularity exec ${sif} tissueCut \
        -i ${geneExp} \
        --dnbfile ${barcodeReadsCounts} \
        -s ${tissueMaskFile} \
        --sn ${SN} \
        -O Transcriptomics \
        -d -t 8 \
        -o ${result_04tissuecut}

    for i in `h5dump -n ${result_03register}/${SN}.reregist.ipr | grep 'Labeling/' | awk '{print$2}'`;
    do
    label1=`basename $i`
    label=`echo $label1 | awk -F '_' '{print$2"_"$3}'`
    mkdir -p ${result_04tissuecut}/tissuecut_${label}
    labelmask=$(find ${result_03register} -name \*${label}_tissue_cut.tif)
    echo $labelmask
    /usr/bin/time -v singularity exec ${sif} tissueCut \
        -l $label \
        -i ${geneExp} \
        --dnbfile ${barcodeReadsCounts} \
        -s ${labelmask} \
        --sn ${SN} \
        -O Transcriptomics \
        -d -t 8 \
        -o ${result_04tissuecut}/tissuecut_${label}
    done
else
    # Run SAW tissueCut based on the gene expression matrix directly
    export SINGULARITY_BIND=$outDir,$refDIR,$countDir
    echo `date` "=> there is no image, tissueCut based on the gene expression matrix start......."
    export HDF5_USE_FILE_LOCKING=FALSE
    /usr/bin/time -v singularity exec ${sif} tissueCut \
        -i ${geneExp} \
        --dnbfile ${barcodeReadsCounts} \
        --sn ${SN} \
        -O Transcriptomics \
        -d -t 8 \
        -o ${result_04tissuecut}
fi


## Complete raw GEF to visual GEF
export HDF5_USE_FILE_LOCKING=FALSE
/usr/bin/time -v singularity exec ${sif} cellCut bgef \
    -i ${geneExp} \
    -o ${result_04tissuecut}/${SN}.gef \
    -O Transcriptomics

# Complete raw labeled tissue GEF to visual GEF
for i in `h5dump -n ${result_03register}/${SN}.reregist.ipr | grep 'Labeling/' | awk '{print$2}'`;
do
label1=`basename $i`
label=`echo $label1 | awk -F_ '{print$2"_"$3}'`
export HDF5_USE_FILE_LOCKING=FALSE
/usr/bin/time -v singularity exec ${sif} cellCut bgef \
	-i ${result_04tissuecut}/tissuecut_${label}/${SN}.${label}.raw.label.gef \
	-o ${result_04tissuecut}/tissuecut_${label}/${SN}.${label}.label.gef \
	-O Transcriptomics
done

## Convert GEF to GEM [optional]
/usr/bin/time -v singularity exec ${sif} cellCut view \
    -s ${SN} \
    -i ${result_04tissuecut}/${SN}.gef \
    -o ${result_04tissuecut}/${SN}.gem
gzip ${result_04tissuecut}/${SN}.gem
/usr/bin/time -v singularity exec ${sif} cellCut view \
    -s ${SN} \
    -i ${result_04tissuecut}/${SN}.tissue.gef \
    -o ${result_04tissuecut}/${SN}.tissue.gem
gzip ${result_04tissuecut}/${SN}.tissue.gem


# Run spatialCluster
binSize=200
export SINGULARITY_BIND=$outDir,$countDir
echo `date` "=> spatialCluster start......."
export HDF5_USE_FILE_LOCKING=FALSE
mkdir -p ${outDir}/tmp
export NUMBA_CACHE_DIR=${outDir}/tmp
export MPLCONFIGDIR=${outDir}/tmp

/usr/bin/time -v singularity exec ${sif} spatialCluster \
    -i ${result_04tissuecut}/${SN}.tissue.gef \
    -o ${result_05spatialcluster}/${SN}.spatial.cluster.h5ad \
    -s $binSize


# Run cellCut and cellCluster
export SINGULARITY_BIND=$outDir,$countDir
if [[ $doCell == 'Y' ]]; then
    echo `date` "=> cellCut start......."
    export HDF5_USE_FILE_LOCKING=FALSE
    nucleusLayer=$(basename `find ${result_03register} -name \*fov_stitched*.tif` | grep -v IF | awk -F '_' '{print$1}')
    nucleusMask=$(find ${result_03register} -maxdepth 1 -name ${nucleusLayer}\*_mask.tif)
    /usr/bin/time -v singularity exec ${sif} cellCut cgef \
        -i ${geneExp} \
        -m ${nucleusMask} \
        -o ${result_041cellcut}/${SN}.cellbin.gef
    ## convert cellbin GEF to GEM
     /usr/bin/time -v singularity exec ${sif} cellCut view \
         -i ${result_041cellcut}/${SN}.cellbin.gef \
         -d ${result_04tissuecut}/${SN}.gef \
         -o ${result_041cellcut}/${SN}.cellbin.gem \
         -s ${SN}
    echo `date` "=> cellCluster start......."
    mkdir -p ${outDir}/tmp
    export NUMBA_CACHE_DIR=${outDir}/tmp
    export MPLCONFIGDIR=${outDir}/tmp
    /usr/bin/time -v singularity exec ${sif} cellCluster \
        -i ${result_041cellcut}/${SN}.cellbin.gef \
        -o ${result_051cellcluster}/${SN}.cell.cluster.h5ad
fi


# Run saturation
export SINGULARITY_BIND=$outDir,$countDir
echo `date` "=> saturation start ......"
export HDF5_USE_FILE_LOCKING=FALSE
saturationFile=${countDir}/02.count/${SN}_raw_barcode_gene_exp.txt
/usr/bin/time -v singularity exec ${sif} saturation \
    -i ${saturationFile} \
    --tissue ${result_04tissuecut}/${SN}.tissue.gef \
    -o ${result_06saturation} \
    --bcstat ${bcStatStr} \
    --summary ${countDir}/02.count/${SN}.Aligned.sortedByCoord.out.merge.q10.dedup.target.bam.summary.stat
## plot_200x200_saturation.png also named as ${SN}.saturation.bin200.png in some case.


# Run report to generate HTML report
echo `date` "=> report generation start......"
export HDF5_USE_FILE_LOCKING=FALSE
export SINGULARITY_BIND=$outDir,$countDir
out_iprFile=$(find ${result_03register} -maxdepth 1 -name \*.ipr | head -1)

if [[ -n ${out_iprFile} ]] && [[ -e ${out_iprFile} ]] && [[ $doCell == 'Y' ]]; then
    /usr/bin/time -v singularity exec ${sif} report \
        -m ${bcStatStr} \
        -a ${bcFinalOutStr} \
        -g ${countDir}/02.count/${SN}.Aligned.sortedByCoord.out.merge.q10.dedup.target.bam.summary.stat \
        -l ${result_04tissuecut}/tissuecut.stat \
        -n ${result_04tissuecut}/${SN}.gef \
        -i ${result_03register}/${SN}.rpi \
        -d ${result_05spatialcluster}/${SN}.spatial.cluster.h5ad \
        -t ${result_06saturation}/plot_200x200_saturation.png \
        -b ${result_04tissuecut}/tissue_fig/scatter_200x200_MID_gene_counts.png \
        -v ${result_04tissuecut}/tissue_fig/violin_200x200_MID_gene.png \
        -c ${result_04tissuecut}/tissue_fig/statistic_200x200_MID_gene_DNB.png \
        --bin20Saturation ${result_04tissuecut}/tissue_fig/scatter_20x20_MID_gene_counts.png \
        --bin20violin ${result_04tissuecut}/tissue_fig/violin_20x20_MID_gene.png \
        --bin20MIDGeneDNB ${result_04tissuecut}/tissue_fig/statistic_20x20_MID_gene_DNB.png \
        --bin50Saturation ${result_04tissuecut}/tissue_fig/scatter_50x50_MID_gene_counts.png \
        --bin50violin ${result_04tissuecut}/tissue_fig/violin_50x50_MID_gene.png \
        --bin50MIDGeneDNB ${result_04tissuecut}/tissue_fig/statistic_50x50_MID_gene_DNB.png \
        --bin100Saturation ${result_04tissuecut}/tissue_fig/scatter_100x100_MID_gene_counts.png \
        --bin100violin ${result_04tissuecut}/tissue_fig/violin_100x100_MID_gene.png \
        --bin100MIDGeneDNB ${result_04tissuecut}/tissue_fig/statistic_100x100_MID_gene_DNB.png \
        --bin150Saturation ${result_04tissuecut}/tissue_fig/scatter_150x150_MID_gene_counts.png \
        --bin150violin ${result_04tissuecut}/tissue_fig/violin_150x150_MID_gene.png \
        --bin150MIDGeneDNB ${result_04tissuecut}/tissue_fig/statistic_150x150_MID_gene_DNB.png \
        --cellBinGef ${result_041cellcut}/${SN}.cellbin.gef \
        --cellCluster ${result_051cellcluster}/${SN}.cell.cluster.h5ad \
        --iprFile ${out_iprFile} \
        --pipelineVersion SAW_v6.1.0 \
        -s ${SN} \
        --species ${refName} \
        --tissue ${tissueType} \
        --reference ${refName} \
        -o ${result_07report}
elif [[ -n ${out_iprFile} ]] && [[ -e ${out_iprFile} ]] && [[ $doCell == 'N' ]]; then
    /usr/bin/time -v singularity exec ${sif} report \
        -m ${bcStatStr} \
        -a ${bcFinalOutStr} \
        -g ${countDir}/02.count/${SN}.Aligned.sortedByCoord.out.merge.q10.dedup.target.bam.summary.stat \
        -l ${result_04tissuecut}/tissuecut.stat \
        -n ${result_04tissuecut}/${SN}.gef \
        -i ${result_03register}/${SN}.rpi \
        -d ${result_05spatialcluster}/${SN}.spatial.cluster.h5ad \
        -t ${result_06saturation}/plot_200x200_saturation.png \
        -b ${result_04tissuecut}/tissue_fig/scatter_200x200_MID_gene_counts.png \
        -v ${result_04tissuecut}/tissue_fig/violin_200x200_MID_gene.png \
        -c ${result_04tissuecut}/tissue_fig/statistic_200x200_MID_gene_DNB.png \
        --bin20Saturation ${result_04tissuecut}/tissue_fig/scatter_20x20_MID_gene_counts.png \
        --bin20violin ${result_04tissuecut}/tissue_fig/violin_20x20_MID_gene.png \
        --bin20MIDGeneDNB ${result_04tissuecut}/tissue_fig/statistic_20x20_MID_gene_DNB.png \
        --bin50Saturation ${result_04tissuecut}/tissue_fig/scatter_50x50_MID_gene_counts.png \
        --bin50violin ${result_04tissuecut}/tissue_fig/violin_50x50_MID_gene.png \
        --bin50MIDGeneDNB ${result_04tissuecut}/tissue_fig/statistic_50x50_MID_gene_DNB.png \
        --bin100Saturation ${result_04tissuecut}/tissue_fig/scatter_100x100_MID_gene_counts.png \
        --bin100violin ${result_04tissuecut}/tissue_fig/violin_100x100_MID_gene.png \
        --bin100MIDGeneDNB ${result_04tissuecut}/tissue_fig/statistic_100x100_MID_gene_DNB.png \
        --bin150Saturation ${result_04tissuecut}/tissue_fig/scatter_150x150_MID_gene_counts.png \
        --bin150violin ${result_04tissuecut}/tissue_fig/violin_150x150_MID_gene.png \
        --bin150MIDGeneDNB ${result_04tissuecut}/tissue_fig/statistic_150x150_MID_gene_DNB.png \
        --iprFile ${out_iprFile} \
        --pipelineVersion SAW_v6.1.0 \
        -s ${SN} \
        --species ${refName} \
        --tissue ${tissueType} \
        --reference ${refName} \
        -o ${result_07report}
else
    /usr/bin/time -v singularity exec ${sif} report \
        -m ${bcStatStr} \
        -a ${bcFinalOutStr} \
        -g ${result_02count}/${SN}.Aligned.sortedByCoord.out.merge.q10.dedup.target.bam.summary.stat \
        -l ${result_04tissuecut}/tissuecut.stat \
        -n ${result_04tissuecut}/${SN}.gef \
        -d ${result_05spatialcluster}/${SN}.spatial.cluster.h5ad \
        -t ${result_06saturation}/plot_200x200_saturation.png \
        -b ${result_04tissuecut}/tissue_fig/scatter_200x200_MID_gene_counts.png \
        -v ${result_04tissuecut}/tissue_fig/violin_200x200_MID_gene.png \
        -c ${result_04tissuecut}/tissue_fig/statistic_200x200_MID_gene_DNB.png \
        --bin20Saturation ${result_04tissuecut}/tissue_fig/scatter_20x20_MID_gene_counts.png \
        --bin20violin ${result_04tissuecut}/tissue_fig/violin_20x20_MID_gene.png \
        --bin20MIDGeneDNB ${result_04tissuecut}/tissue_fig/statistic_20x20_MID_gene_DNB.png \
        --bin50Saturation ${result_04tissuecut}/tissue_fig/scatter_50x50_MID_gene_counts.png \
        --bin50violin ${result_04tissuecut}/tissue_fig/violin_50x50_MID_gene.png \
        --bin50MIDGeneDNB ${result_04tissuecut}/tissue_fig/statistic_50x50_MID_gene_DNB.png \
        --bin100Saturation ${result_04tissuecut}/tissue_fig/scatter_100x100_MID_gene_counts.png \
        --bin100violin ${result_04tissuecut}/tissue_fig/violin_100x100_MID_gene.png \
        --bin100MIDGeneDNB ${result_04tissuecut}/tissue_fig/statistic_100x100_MID_gene_DNB.png \
        --bin150Saturation ${result_04tissuecut}/tissue_fig/scatter_150x150_MID_gene_counts.png \
        --bin150violin ${result_04tissuecut}/tissue_fig/violin_150x150_MID_gene.png \
        --bin150MIDGeneDNB ${result_04tissuecut}/tissue_fig/statistic_150x150_MID_gene_DNB.png \
        --pipelineVersion SAW_v6.1.0 \
        -s ${SN} \
        --species ${refName} \
        --tissue ${tissueType} \
        --reference ${refName} \
        -o ${result_07report}
fi

## Organize files required by StereoMap

# 03.register
if [[ -f $result_03register/${SN}.rpi ]] || [[ -f out_iprFile ]]
then
    ln -s $result_03register/${SN}.rpi $result_visualization/${SN}.rpi
    ln -s $out_iprFile $result_visualization/$(basename "$out_iprFile")
fi

# 04.tissuecut
if [[ -f $result_04tissuecut/${SN}.gef ]]
then
    ln -s $result_04tissuecut/${SN}.gef $result_visualization/${SN}.gef
fi

for i in `h5dump -n ${result_03register}/${SN}.reregist.ipr | grep 'Labeling/' | awk '{print$2}'`;
do
label1=`basename $i`
label=`echo $label1 | awk -F '_' '{print$2"_"$3}'`
	if [[ -f $result_04tissuecut/tissuecut_${label}/${SN}.${label}.label.gef ]]
	then
		ln -s $result_04tissuecut/tissuecut_${label}/${SN}.${label}.label.gef $result_visualization/${SN}.${label}.label.gef
	fi
done

# 041.cellcut
if [[ -f $result_041cellcut/${SN}.cellbin.gef ]]
then
    ln -s $result_041cellcut/${SN}.cellbin.gef $result_visualization/${SN}.cellbin.gef
fi

# 05.spatialCluster
if [[ -f $result_05spatialcluster/${SN}.spatial.cluster.h5ad ]]
then
    ln -s $result_05spatialcluster/${SN}.spatial.cluster.h5ad $result_visualization/${SN}.spatial.cluster.h5ad
fi

# 051.cellCluster
if [[ -f $result_051cellcluster/${SN}.cell.cluster.h5ad ]]
then
    ln -s $result_051cellcluster/${SN}.cell.cluster.h5ad $result_visualization/${SN}.cell.cluster.h5ad
fi


echo `date` " All done! "
