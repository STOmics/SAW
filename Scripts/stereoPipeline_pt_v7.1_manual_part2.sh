#!/bin/bash
set -e

if [[ $# -lt 12 ]];then
    echo "usage: sh $0 -SN -dataDir -registJson -speciesName -tissueType -outDir -imageRecordFile -imageCompressedFile -doCellBin -threads -sif
    -SN : sample id
    -dataDir : output directory of gene expression matrix result
    -proteinList : protein list file which contain protein sequences and names
    -registJson : manual registration json file
    -speciesName : specie of the sample
    -tissueType : tissue type of the sample
    -outDir : output directory path (Suggest not being in the same directory as the dataDir directory)
    -imageRecordFile : QC-success: image file(*.ipr) found in /dataDir/04.register; QC-failed: image file(*.ipr) generated by ImageStudio software
    -imageCompressedFile : image file(*.tar.gz) generated by ImageStudio software
    -doCellBin : [Y/N]
    -threads : the number of threads to be used in running the pipeline
    -sif : the file format of the visual software
    "
    exit
fi

while [[ -n "$1" ]]
do
    case "$1" in
        -SN) SN="$2"
            shift ;;
        -dataDir) dataDir="$2"
            shift ;;
        -proteinList) proteinList="$2"
            shift ;;
        -registJson) registJson="$2"
            shift ;;
        -speciesName) refName="$2"
            shift ;;
        -tissueType) tissueType="$2"
            shift ;;
        -outDir) outDir="$2"
            shift ;;
        -imageRecordFile) iprFile="$2"
            shift ;;
        -imageCompressedFile) imageTarFile="$2"
            shift ;;
        -doCellBin) doCell="$2"
            shift ;;
        -threads) threads="$2"
            shift ;;
        -sif) sif="$2"
            shift ;;
    esac
        shift
done


# Software check
if [ `command -v singularity` ]
then
    singularityPath=`command -v singularity`
    echo `date` " singularity check: pass, and singularity path is ${singularityPath}"
else
    echo `date` " singularity check: singularity does not exits, please verify that you have installed singularity and exported it to your system PATH variable"
    exit
fi

if [[ -n $sif ]]
then
    echo `date` " singularity image file check: file exist and SIF path is ${sif}"
else
    echo `date` " singularity image file check: file does not exist, please double check your SIF file is in the current directory or the path given by the option -s is valid."
fi


# Get summary of previous gene expression matrix result
barcodeReadsCounts=${dataDir}/01T.merge/${SN}.merge.barcodeReadsCount.txt
starBams=()
bcStat=()
bcFinalOut=()
bcReadsCounts=()

for bam in `find $dataDir -name \*.Aligned.sortedByCoord.out.bam`;do starBams[${#starBams[@]}]=$bam;done
for cidstat in `find $dataDir -name \*CIDMap.stat`;do bcStat[${#bcStat[@]}]=$cidstat;done
for logfinalout in `find $dataDir -name \*.Log.final.out`;do bcFinalOut[${#bcFinalOut[@]}]=$logfinalout;done
for bccount in `find $dataDir -name \*barcodeReadsCount.txt`;do bcReadsCounts[${#bcReadsCounts[@]}]=$bccount;done

if [[ $(echo ${#bcReadsCounts[*]}) == '1' ]]; then
    bcReadsCountsStr=$bcReadsCounts
    starBamsStr=${starBams[0]}
    bcFinalOutStr=${bcFinalOut[0]}
    bcStatStr=${bcStat[0]}
else
    bcReadsCountsStr=$( IFS=','; echo "${bcReadsCounts[*]}" )
    starBamsStr=$( IFS=','; echo "${starBams[*]}" )
    bcFinalOutStr=$( IFS=','; echo "${bcFinalOut[*]}" )
    bcStatStr=$( IFS=','; echo "${bcStat[*]}" )
fi
adtRead1=$(cat $dataDir/00P.mapping/adtFq1.list|tr '\n' ',' |sed 's/.$//')

# Prepare output directories
proteinListDIR=$(dirname $proteinList)
registJsonDIR=$(dirname $registJson)
if [[ $iprFile ]] && [[ $imageTarFile ]];then
    iprDIR=$(dirname $iprFile)
    imgTarDIR=$(dirname $imageTarFile)
fi

if [[ ! -d $outDir ]];then
    mkdir -p $outDir
fi

arr_result=( ${outDir}/05T.tissuecut ${outDir}/05P.tissuecut ${outDir}/06T.spatialcluster ${outDir}/06P.spatialcluster ${outDir}/07T.saturation ${outDir}/07P.saturation ${outDir}/08.multiomics ${outDir}/09.report ${outDir}/visualization)
for each in "${arr_result[@]}";
do
    mkdir -p $each
done

if [[ ! -d ${outDir}/04.register ]];then
    mkdir -p ${outDir}/04.register
fi

if [[ $doCell == "Y" ]]; then
    mkdir -p ${outDir}/051T.cellcut
    mkdir -p ${outDir}/051P.cellcut
    mkdir -p ${outDir}/061T.cellcluster
    mkdir -p ${outDir}/061P.cellcluster
fi

## Get original TIFF path, either QCPass or QCFail
if [[ ! -d $dataDir/04.register/manual_register ]];then
    tifDir=$dataDir/04.register
else
	tifDir=$dataDir/04.register/manual_register
fi


# Run SAW register 
## Stitch microscope tile images to a panoramic image, perform tissue and cell (optional, depends on -doCellBin) segmentation, and register the panoramic image and the segmentated images with the gene expression matrix
if [[ -f $imageTarFile ]] && [[ -f $iprFile ]]  && [[ $doCell == "Y" ]]; then
    ## Run SAW register (stitch, tissue segmentation, cell segmentation) + SAW imageTools
    echo `date` "=> image processing and registration start......."
    export HDF5_USE_FILE_LOCKING=FALSE
    imgTarDIR=$(dirname $imageTarFile)
    iprDIR=$(dirname $iprFile)
    export SINGULARITY_BIND=$outDir,$imgTarDIR,$iprDIR,$dataDir,${registJsonDIR}
    cp -rf ${iprFile} ${outDir}/04.register/${SN}.reregist.ipr
    /usr/bin/time -v singularity exec ${sif} manualRegister \
			-i ${tifDir} \
			-c ${outDir}/04.register/${SN}.reregist.ipr \
			-v ${dataDir}/03.calibration/${SN}.calibrated.raw.gef \
			-m ${registJson} \
			-p ${outDir}/04.register
    out_iprFile=$(find ${outDir}/04.register -maxdepth 1 -name \*.ipr | head -1)
    /usr/bin/time -v singularity exec ${sif} imageTools ipr2img \
            -i ${imageTarFile} \
            -c ${out_iprFile} \
            -d tissue cell \
            -r True \
            -o ${outDir}/04.register

elif [[ -f $imageTarFile ]] && [[ -f $iprFile ]]  && [[ $doCell == "N" ]]; then
    # Run SAW rapidRegister (stitch, tissue segmentation) + SAW imageTools
    echo `date` "=> image processing and registration start......."
    export HDF5_USE_FILE_LOCKING=FALSE
    imgTarDIR=$(dirname $imageTarFile)
    iprDIR=$(dirname $iprFile)

    export SINGULARITY_BIND=$outDir,$imgTarDIR,$iprDIR,$dataDir,$registJsonDIR
    cp -rf ${iprFile} ${outDir}/04.register/${SN}.reregist.ipr
    /usr/bin/time -v singularity exec ${sif} manualRegister \
          -i ${tifDir} \
          -c ${outDir}/04.register/${SN}.reregist.ipr \
          -v ${dataDir}/03.calibration/${SN}.calibrated.raw.gef \
          -m ${registJson} \
          -p ${outDir}/04.register
			
    out_iprFile=$(find ${outDir}/04.register -maxdepth 1 -name \*.ipr | head -1)
    /usr/bin/time -v singularity exec ${sif} imageTools ipr2img \
            -i ${imageTarFile} \
            -c $out_iprFile \
            -d tissue \
            -r True \
            -o ${outDir}/04.register
fi

# Run SAW tissueCut
if [[ -f $imageTarFile ]] && [[ -f $iprFile ]]; then
    ## Run tissueCut to get the spatial gene expression profile of the tissue-covered region
    transformedTif=$(find ${outDir}/04.register -maxdepth 1 -name \*fov_stitched_transformed.tif)
    if [[ -n $transformedTif ]]
    then
        nucleusLayer=$(find ${outDir}/04.register -maxdepth 1 -name \*fov_stitched_transformed.tif -exec sh -c 'for f do basename -- "$f" _fov_stitched_transformed.tif;done' sh {} + | grep -v IF | awk -F_ '{print$1}')
    else
        nucleusLayer=$(find ${outDir}/04.register -maxdepth 1 -name \*fov_stitched.tif -exec sh -c 'for f do basename -- "$f" _fov_stitched.tif;done' sh {} + | grep -v IF | awk -F_ '{print$1}')
    fi
    tissueMaskFile=$(find ${outDir}/04.register -maxdepth 1 -name ${nucleusLayer}_${SN}_tissue_cut.tif)

    echo `date` "=> tissueCut (Transcriptomics) start......."
    export HDF5_USE_FILE_LOCKING=FALSE
    export SINGULARITY_BIND=$outDir,$dataDir
    /usr/bin/time -v singularity exec ${sif} tissueCut \
        -i ${dataDir}/03.calibration/${SN}.calibrated.raw.gef \
        --dnbfile ${barcodeReadsCounts} \
        -s ${tissueMaskFile} \
        --sn ${SN} \
        -O Transcriptomics \
        -d -t 8 \
        -o ${outDir}/05T.tissuecut

    export HDF5_USE_FILE_LOCKING=FALSE
    /usr/bin/time -v singularity exec ${sif} cellCut bgef \
        -i ${outDir}/05T.tissuecut/${SN}.tissue.gef \
        -o ${outDir}/05T.tissuecut/${SN}.${nucleusLayer}.gef \
        -O Transcriptomics \
        -b 1,5,10,20,50,100,150,200

    echo `date` "=> tissueCut (Proteomics) start......."
    export HDF5_USE_FILE_LOCKING=FALSE
    validCidReads=${dataDir}/00P.mapping/${SN}_valid_cid_reads.tsv
    /usr/bin/time -v singularity exec ${sif} tissueCut \
        -i ${dataDir}/03.calibration/${SN}.protein.calibrated.raw.gef \
        --dnbfile ${validCidReads} \
        -s ${tissueMaskFile} \
        --sn ${SN} \
        -O Proteomics \
        -d -t 8 \
        -o ${outDir}/05P.tissuecut

    export HDF5_USE_FILE_LOCKING=FALSE
    /usr/bin/time -v singularity exec ${sif} cellCut bgef \
        -i ${outDir}/05P.tissuecut/${SN}.protein.tissue.gef \
        -o ${outDir}/05P.tissuecut/${SN}.protein.${nucleusLayer}.gef \
        -O Proteomics \
        -b 1,5,10,20,50,100,150,200

    out_iprFile=$(find ${outDir}/04.register -maxdepth 1 -name \*.ipr | head -1)
    for i in `singularity exec ${sif} h5dump -n $out_iprFile | grep 'Labeling/' | grep -v 'Labeling/.*/Canvas'|grep -v 'Labeling/.*/Element'|awk '{print$2}'`;
    do
    label=`basename $i`
    mkdir -p ${outDir}/05T.tissuecut/tissuecut_${label}
    labelmask=$(find ${outDir}/04.register -name \*${label}_tissue_cut.tif)
    echo $labelmask
    /usr/bin/time -v singularity exec ${sif} tissueCut \
        -l $label \
        -i ${dataDir}/03.calibration/${SN}.calibrated.raw.gef \
        --dnbfile ${barcodeReadsCounts} \
        -s ${labelmask} \
        --sn ${SN} \
        -O Transcriptomics \
        -d -t 8 \
        -o ${outDir}/05T.tissuecut/tissuecut_${label}

    mkdir -p ${outDir}/05P.tissuecut/tissuecut_${label}
    labelmask=$(find ${outDir}/04.register -name \*${label}_tissue_cut.tif)
    echo $labelmask
    /usr/bin/time -v singularity exec ${sif} tissueCut \
        -l $label \
        -i ${dataDir}/03.calibration/${SN}.protein.calibrated.raw.gef \
        --dnbfile ${validCidReads} \
        -s ${labelmask} \
        --sn ${SN} \
        -O Proteomics \
        -d -t 8 \
        -o ${outDir}/05P.tissuecut/tissuecut_${label}
    done
else
    ## Run SAW tissueCut based on the gene expression matrix directly
    export SINGULARITY_BIND=$outDir,$dataDir
    echo `date` "=> there is no image, tissueCut (Transcriptomics) based on the gene expression matrix start......."
    export HDF5_USE_FILE_LOCKING=FALSE
    /usr/bin/time -v singularity exec ${sif} tissueCut \
        -i ${dataDir}/03.calibration/${SN}.calibrated.raw.gef \
        --dnbfile ${barcodeReadsCounts} \
        --sn ${SN} \
        -O Transcriptomics \
        -d -t 8 \
        -o ${outDir}/05T.tissuecut

    validCidReads=${dataDir}/00P.mapping/${SN}_valid_cid_reads.tsv
    echo `date` "=> there is no image, tissueCut (Proteomics) based on the gene expression matrix start......."
    export HDF5_USE_FILE_LOCKING=FALSE
    /usr/bin/time -v singularity exec ${sif} tissueCut \
        -i ${dataDir}/03.calibration/${SN}.protein.calibrated.raw.gef \
        --dnbfile ${validCidReads} \
        --sn ${SN} \
        -O Proteomics \
        -d -t 8 \
        -o ${outDir}/05P.tissuecut
fi

# Complete raw GEF to visual GEF
export HDF5_USE_FILE_LOCKING=FALSE
export SINGULARITY_BIND=$outDir,$dataDir
/usr/bin/time -v singularity exec ${sif} cellCut bgef \
    -i ${dataDir}/03.calibration/${SN}.calibrated.raw.gef \
    -o ${outDir}/05T.tissuecut/${SN}.gef \
    -O Transcriptomics \
    -b 1,5,10,20,50,100,150,200

export HDF5_USE_FILE_LOCKING=FALSE
export SINGULARITY_BIND=$outDir,$dataDir
/usr/bin/time -v singularity exec ${sif} cellCut bgef \
    -i ${dataDir}/03.calibration/${SN}.protein.calibrated.raw.gef \
    -o ${outDir}/05P.tissuecut/${SN}.protein.gef \
    -O Proteomics \
    -b 1,5,10,20,50,100,150,200

# Complete raw labeled tissue GEF to visual GEF
out_iprFile=$(find ${outDir}/03.register -maxdepth 1 -name \*.ipr | head -1)
if [[ -n ${out_iprFile} ]] && [[ -e ${out_iprFile} ]];then
  for i in `singularity exec ${sif} h5dump -n $out_iprFile | grep 'Labeling/' | grep -v 'Labeling/.*/Canvas'|grep -v 'Labeling/.*/Element'|awk '{print$2}'`;
  do
  label=`basename $i`
  export SINGULARITY_BIND=$outDir
  export HDF5_USE_FILE_LOCKING=FALSE
  /usr/bin/time -v singularity exec ${sif} cellCut bgef \
    -i ${outDir}/05T.tissuecut/tissuecut_${label}/${SN}.${label}.raw.label.gef \
    -o ${outDir}/05T.tissuecut/tissuecut_${label}/${SN}.${label}.label.gef \
    -O Transcriptomics

  export HDF5_USE_FILE_LOCKING=FALSE
  /usr/bin/time -v singularity exec ${sif} cellCut bgef \
    -i ${outDir}/05P.tissuecut/tissuecut_${label}/${SN}.protein.${label}.raw.label.gef \
    -o ${outDir}/05P.tissuecut/tissuecut_${label}/${SN}.protein.${label}.label.gef \
    -O Proteomics
  done
fi

## Convert GEF to GEM [optional]
export SINGULARITY_BIND=$outDir
export HDF5_USE_FILE_LOCKING=FALSE
/usr/bin/time -v singularity exec ${sif} cellCut view \
    -s ${SN} \
    -i ${outDir}/05T.tissuecut/${SN}.tissue.gef \
    -o ${outDir}/05T.tissuecut/${SN}.tissue.gem
gzip -f ${outDir}/05T.tissuecut/${SN}.tissue.gem

export HDF5_USE_FILE_LOCKING=FALSE
/usr/bin/time -v singularity exec ${sif} cellCut view \
    -s ${SN} \
    -i ${outDir}/05P.tissuecut/${SN}.protein.tissue.gef \
    -o ${outDir}/05P.tissuecut/${SN}.protein.tissue.gem
gzip -f ${outDir}/05P.tissuecut/${SN}.protein.tissue.gem


# Run spatialCluster for Transcriptomics and Proteomics
echo `date` "=> spatialCluster (Transcriptomics) start......."
export SINGULARITY_BIND=$outDir
export HDF5_USE_FILE_LOCKING=FALSE
mkdir -p ${outDir}/tmp
export NUMBA_CACHE_DIR=${outDir}/tmp
export MPLCONFIGDIR=${outDir}/tmp
binSize=200
resolution=1.0
/usr/bin/time -v singularity exec ${sif} spatialCluster \
    -i ${outDir}/05T.tissuecut/${SN}.tissue.gef \
    -o ${outDir}/06T.spatialcluster/${SN}.bin${binSize}_${resolution}.spatial.cluster.h5ad \
    -s ${binSize} \
    -r ${resolution}

echo `date` "=> spatialCluster (Proteomics) start......."
export SINGULARITY_BIND=$outDir
export HDF5_USE_FILE_LOCKING=FALSE
/usr/bin/time -v singularity exec ${sif} spatialCluster-SP \
    -i ${outDir}/05P.tissuecut/${SN}.protein.tissue.gef \
    -o ${outDir}/06P.spatialcluster/${SN}.protein.bin${binSize}_0.1.spatial.cluster.h5ad \
    -s ${binSize}

# Run cellCut, cellCorrect, cellCluster, and cellChunk for Transcriptomics
export SINGULARITY_BIND=$outDir,$dataDir
if [[ -f $imageTarFile ]] && [[ -f $iprFile ]]  && [[ $doCell == "Y" ]]; then
	## Run SAW cellCut
    echo `date` "=> cellCut (Transcriptomics) start......."
    export HDF5_USE_FILE_LOCKING=FALSE

    transformedTif=$(find ${outDir}/04.register -maxdepth 1 -name \*fov_stitched_transformed.tif)
    if [[ -n $transformedTif ]]
    then
        nucleusLayer=$(find ${outDir}/04.register -maxdepth 1 -name \*fov_stitched_transformed.tif -exec sh -c 'for f do basename -- "$f" _fov_stitched_transformed.tif;done' sh {} + | grep -v IF | awk -F_ '{print$1}')
    else
        nucleusLayer=$(find ${outDir}/04.register -maxdepth 1 -name \*fov_stitched.tif -exec sh -c 'for f do basename -- "$f" _fov_stitched.tif;done' sh {} + | grep -v IF | awk -F_ '{print$1}')
    fi
    nucleusMask=$(find ${outDir}/04.register -maxdepth 1 -name ${nucleusLayer}_${SN}_mask.tif)

    /usr/bin/time -v singularity exec ${sif} cellCut cgef \
        -i ${dataDir}/03.calibration/${SN}.calibrated.raw.gef \
        -m ${nucleusMask} \
        -o ${outDir}/051T.cellcut/${SN}.cellbin.gef

	## Run SAW cellCorrect
    echo `date` "=> cellCorrect (Transcriptomics) start......."
    export HDF5_USE_FILE_LOCKING=FALSE
    /usr/bin/time -v singularity exec ${sif} cellCorrect \
            -i ${dataDir}/03.calibration/${SN}.calibrated.raw.gef \
            -m ${nucleusMask} \
            -d 10 \
            -o ${outDir}/051T.cellcut
    gzip -f ${outDir}/051T.cellcut/${SN}.adjusted.gem

    ## Write the adjusted mask image into SN.rpi
    cellCorrectMask=$(find ${outDir}/051T.cellcut -maxdepth 1 -name ${nucleusLayer}\*_mask_edm_dis\*.tif)
    /usr/bin/time -v singularity exec ${sif} imageTools img2rpi \
        -i ${cellCorrectMask} \
        -g ${nucleusLayer}/CellMask_adjusted \
        -b 2 10 50 100 150 \
        -o ${outDir}/04.register/${SN}.rpi

	## Run SAW cellCluster
    echo `date` "=> cellCluster (Transcriptomics) start......."
    mkdir -p ${outDir}/tmp
    export NUMBA_CACHE_DIR=${outDir}/tmp
    export MPLCONFIGDIR=${outDir}/tmp
    /usr/bin/time -v singularity exec ${sif} cellCluster \
        -i ${outDir}/051T.cellcut/${SN}.adjusted.cellbin.gef \
        -o ${outDir}/061T.cellcluster/${SN}.adjusted.cell.cluster.h5ad
	
	/usr/bin/time -v singularity exec ${sif} cellCluster \
        -i ${outDir}/051T.cellcut/${SN}.cellbin.gef \
        -o ${outDir}/061T.cellcluster/${SN}.cell.cluster.h5ad

  ## Run SAW cellChunk to write rendering data into cellbin.gef
  echo `date` "=> cellChunk (Transcriptomics) start......."
  /usr/bin/time -v singularity exec ${sif} cellChunk \
        -i ${outDir}/051T.cellcut/${SN}.adjusted.cellbin.gef \
        -o ${outDir}/051T.cellcut/

  /usr/bin/time -v singularity exec ${sif} cellChunk \
        -i ${outDir}/051T.cellcut/${SN}.cellbin.gef \
        -o ${outDir}/051T.cellcut/
fi

# Run cellCut and cellCluster for Proteomics
export SINGULARITY_BIND=$outDir,$dataDir
if [[ -f $imageTarFile ]] && [[ -f $iprFile ]]  && [[ $doCell == "Y" ]]; then
    echo `date` "=> cellCut (Proteomics) start......."
    export HDF5_USE_FILE_LOCKING=FALSE

    transformedTif=$(find ${outDir}/04.register -maxdepth 1 -name \*fov_stitched_transformed.tif)
    if [[ -n $transformedTif ]]
    then
        nucleusLayer=$(find ${outDir}/04.register -maxdepth 1 -name \*fov_stitched_transformed.tif -exec sh -c 'for f do basename -- "$f" _fov_stitched_transformed.tif;done' sh {} + | grep -v IF | awk -F_ '{print$1}')
    else
        nucleusLayer=$(find ${outDir}/04.register -maxdepth 1 -name \*fov_stitched.tif -exec sh -c 'for f do basename -- "$f" _fov_stitched.tif;done' sh {} + | grep -v IF | awk -F_ '{print$1}')
    fi
    nucleusMask=$(find ${outDir}/04.register -maxdepth 1 -name ${nucleusLayer}_${SN}_mask.tif)

    /usr/bin/time -v singularity exec ${sif} cellCut cgef \
        -i ${dataDir}/03.calibration/${SN}.protein.calibrated.raw.gef \
        -m ${nucleusMask} \
        -o ${outDir}/051P.cellcut/${SN}.protein.cellbin.gef

    echo `date` "=> cellCorrect (Proteomics) start......."
    export HDF5_USE_FILE_LOCKING=FALSE
    /usr/bin/time -v singularity exec ${sif} cellCorrect \
            -i ${dataDir}/03.calibration/${SN}.protein.calibrated.raw.gef \
            -m ${nucleusMask} \
            -d 10 \
            -o ${outDir}/051P.cellcut
    mv ${outDir}/051P.cellcut/${SN}.adjusted.cellbin.gef ${outDir}/051P.cellcut/${SN}.protein.adjusted.cellbin.gef
    mv ${outDir}/051P.cellcut/${SN}.adjusted.gem ${outDir}/051P.cellcut/${SN}.protein.adjusted.gem
    gzip -f ${outDir}/051P.cellcut/${SN}.protein.adjusted.gem

    ## convert cellbin GEF to GEM
    # /usr/bin/time -v singularity exec ${sif} cellCut view \
    #     -i ${outDir}/051T.cellcut/${SN}.cellbin.gef \
    #     -d ${dataDir}/03.calibration/${SN}.gef \
    #     -o ${outDir}/051T.cellcut/${SN}.cellbin.gem \
    #     -s ${SN}

    echo `date` "=> cellCluster (Proteomics) start......."
    mkdir -p ${outDir}/tmp
    export NUMBA_CACHE_DIR=${outDir}/tmp
    export MPLCONFIGDIR=${outDir}/tmp
    export HDF5_USE_FILE_LOCKING=FALSE
    /usr/bin/time -v singularity exec ${sif} cellCluster-SP \
        -i ${outDir}/051P.cellcut/${SN}.protein.adjusted.cellbin.gef \
        -o ${outDir}/061P.cellcluster/${SN}.protein.adjusted.cell.cluster.h5ad

    /usr/bin/time -v singularity exec ${sif} cellCluster-SP \
        -i ${outDir}/051P.cellcut/${SN}.protein.cellbin.gef \
        -o ${outDir}/061P.cellcluster/${SN}.protein.cell.cluster.h5ad

    echo `date` "=> cellChunk (Proteomics) start......."
    # Write rendering data into cellbin.gef
    /usr/bin/time -v singularity exec ${sif} cellChunk \
        -i ${outDir}/051P.cellcut/${SN}.protein.adjusted.cellbin.gef \
        -o ${outDir}/051P.cellcut/

    /usr/bin/time -v singularity exec ${sif} cellChunk \
        -i ${outDir}/051P.cellcut/${SN}.protein.cellbin.gef \
        -o ${outDir}/051P.cellcut/
fi

# Run saturation
export SINGULARITY_BIND=$outDir,$dataDir
echo `date` "=> saturation (Transcriptomics) start ......"
export HDF5_USE_FILE_LOCKING=FALSE
bcStatStr=$(find ${dataDir}/00T.mapping -name \*stat | tr '\n' ',' | sed 's/.$//')
/usr/bin/time -v singularity exec ${sif} saturation \
    -i ${dataDir}/02T.count/${SN}_raw_barcode_gene_exp.txt \
    --tissue ${outDir}/05T.tissuecut/${SN}.tissue.gef \
    --bcstat ${bcStatStr} \
    --summary ${dataDir}/02T.count/${SN}.Aligned.sortedByCoord.out.merge.q10.dedup.target.bam.summary.stat \
    -o ${outDir}/07T.saturation

export SINGULARITY_BIND=$outDir,$dataDir
echo `date` "=> saturation (Proteomics) start ......"
export HDF5_USE_FILE_LOCKING=FALSE
/usr/bin/time -v singularity exec ${sif} saturation \
    -i ${dataDir}/00P.mapping/${SN}_cid_pid_mid_reads.tsv \
    --tissue ${outDir}/05P.tissuecut/${SN}.protein.tissue.gef \
    --bcstat ${dataDir}/00P.mapping/${SN}_map.stat \
    --protein \
    -o ${outDir}/07P.saturation

## Run multiomicsAnalysis
echo `date` "=> multiomicsAnalysis start ......"
echo `date` "=> Please make sure your protein list only records actual input proteins"
export HDF5_USE_FILE_LOCKING=FALSE
export NUMBA_CACHE_DIR=${outDir}/tmp
export MPLCONFIGDIR=${outDir}/tmp
export NUMBA_DEFAULT_NUM_THREADS=10
export SINGULARITY_BIND=$outDir,$proteinListDIR
/usr/bin/time -v singularity exec ${sif} multiomicsAnalysis \
    -r ${outDir}/05T.tissuecut/${SN}.tissue.gem.gz \
    -p ${outDir}/05P.tissuecut/${SN}.protein.tissue.gem.gz \
    -b 50 \
    -pl ${proteinList} \
    -o ${outDir}/08.multiomics


# Run report to generate HTML report
echo `date` "=> report generation start......"
export HDF5_USE_FILE_LOCKING=FALSE
export SINGULARITY_BIND=$outDir,$dataDir
out_iprFile=$(find ${outDir}/04.register -maxdepth 1 -name \*.ipr | head -1)
adtRead1=$(cat $dataDir/00P.mapping/adtFq1.list|tr '\n' ',' |sed 's/.$//')
bcStatStr=$(find ${dataDir}/00T.mapping -name \*.stat | tr '\n' ',' | sed 's/.$//')
bcFinalOutStr=$(find ${dataDir}/00T.mapping -name \*.final.out | tr '\n' ',' | sed 's/.$//')
proteinMapStat=${dataDir}/00P.mapping/${SN}_map.stat
pipever=$(basename ${sif} .sif)

if [[ -n ${out_iprFile} ]] && [[ -e ${out_iprFile} ]] && [[ $doCell == 'Y' ]]; then
    /usr/bin/time -v singularity exec ${sif} report-PT \
        --RNAMapStat  ${bcStatStr}  \
        --ProteinMapStat ${proteinMapStat} \
        -a ${bcFinalOutStr} \
        -g ${dataDir}/02T.count/${SN}.Aligned.sortedByCoord.out.merge.q10.dedup.target.bam.summary.stat \
        --RNATissueCutStat ${outDir}/05T.tissuecut/tissuecut.stat \
        --ProteinTissueCutStat ${outDir}/05P.tissuecut/tissuecut.stat \
        --RNAVisGef ${outDir}/05T.tissuecut/${SN}.gef \
        --ProteinVisGef ${outDir}/05P.tissuecut/${SN}.protein.gef \
        --RNASquareClusterFile ${outDir}/06T.spatialcluster/${SN}.bin${binSize}_${resolution}.spatial.cluster.h5ad \
        --ProteinSquareClusterFile ${outDir}/06P.spatialcluster/${SN}.protein.bin${binSize}_0.1.spatial.cluster.h5ad \
        --rpi ${outDir}/04.register/${SN}.rpi \
        --saturation ${outDir}/07T.saturation/plot_200x200_saturation.png \
        --sn ${SN} \
        --RNACellGef ${outDir}/051T.cellcut/${SN}.adjusted.cellbin.gef \
        --ProteinCellGef ${outDir}/051P.cellcut/${SN}.protein.adjusted.cellbin.gef \
        --RNACellCluster ${outDir}/061T.cellcluster/${SN}.adjusted.cell.cluster.h5ad  \
        --ProteinCellCluster ${outDir}/061P.cellcluster/${SN}.protein.adjusted.cell.cluster.h5ad \
        --iprFile ${out_iprFile} \
        --species ${refName} \
        --tissue ${tissueType} \
        --rna_tissue_fig ${outDir}/05T.tissuecut/tissue_fig \
        --protein_tissue_fig ${outDir}/05P.tissuecut/tissue_fig \
        --reference ${refName} \
        --pipelineVersion ${pipever} \
        --adt_fastq_name ${adtRead1} \
        --multimomics_spatial ${outDir}/08.multiomics/${SN}_50_spatial_leiden_totalVI_02.png \
        --multimomics_umap ${outDir}/08.multiomics/${SN}_50_UMAP_leiden_totalVI_01.png \
        --multimomics_heatmap ${outDir}/08.multiomics/${SN}_50_matrixplot_Protein_totalVI_04.png \
        --multimomics_bubble  ${outDir}/08.multiomics/${SN}_50_dotplot_RNA_totalVI_03.png \
        -o ${outDir}/09.report

elif [[ -n ${out_iprFile} ]] && [[ -e ${out_iprFile} ]] && [[ $doCell == 'N' ]]; then
    /usr/bin/time -v singularity exec ${sif} report-PT \
        --RNAMapStat  ${bcStatStr}  \
        --ProteinMapStat ${proteinMapStat} \
        -a ${bcFinalOutStr} \
        -g ${dataDir}/02T.count/${SN}.Aligned.sortedByCoord.out.merge.q10.dedup.target.bam.summary.stat \
        --RNATissueCutStat ${outDir}/05T.tissuecut/tissuecut.stat \
        --ProteinTissueCutStat ${outDir}/05P.tissuecut/tissuecut.stat \
         --RNAVisGef ${outDir}/05T.tissuecut/${SN}.gef \
        --ProteinVisGef ${outDir}/05P.tissuecut/${SN}.protein.gef \
        --RNASquareClusterFile ${outDir}/06T.spatialcluster/${SN}.bin${binSize}_${resolution}.spatial.cluster.h5ad \
        --ProteinSquareClusterFile ${outDir}/06P.spatialcluster/${SN}.protein.bin${binSize}_0.1.spatial.cluster.h5ad \
        --rpi ${outDir}/04.register/${SN}.rpi \
        --saturation ${outDir}/07T.saturation/plot_200x200_saturation.png \
        --sn ${SN} \
        --iprFile ${out_iprFile} \
        --species ${refName} \
        --tissue ${tissueType} \
        --rna_tissue_fig ${outDir}/05T.tissuecut/tissue_fig \
        --protein_tissue_fig ${outDir}/05P.tissuecut/tissue_fig \
        --reference ${refName} \
        --pipelineVersion ${pipever} \
        --adt_fastq_name ${adtRead1} \
        --multimomics_spatial ${outDir}/08.multiomics/${SN}_50_spatial_leiden_totalVI_02.png \
        --multimomics_umap ${outDir}/08.multiomics/${SN}_50_UMAP_leiden_totalVI_01.png \
        --multimomics_heatmap ${outDir}/08.multiomics/${SN}_50_matrixplot_Protein_totalVI_04.png \
        --multimomics_bubble  ${outDir}/08.multiomics/${SN}_50_dotplot_RNA_totalVI_03.png \
        -o ${outDir}/09.report
else
    /usr/bin/time -v singularity exec ${sif} report-PT \
        --RNAMapStat  ${bcStatStr}  \
        --ProteinMapStat ${proteinMapStat} \
        -a ${bcFinalOutStr} \
        -g ${dataDir}/02T.count/${SN}.Aligned.sortedByCoord.out.merge.q10.dedup.target.bam.summary.stat \
        --RNATissueCutStat ${outDir}/05T.tissuecut/tissuecut.stat \
        --ProteinTissueCutStat ${outDir}/05P.tissuecut/tissuecut.stat \
        --RNAVisGef ${outDir}/05T.tissuecut/${SN}.gef \
        --ProteinVisGef ${outDir}/05P.tissuecut/${SN}.protein.gef \
        --RNASquareClusterFile ${outDir}/06T.spatialcluster/${SN}.bin${binSize}_${resolution}.spatial.cluster.h5ad \
        --ProteinSquareClusterFile ${outDir}/06P.spatialcluster/${SN}.protein.bin${binSize}_0.1.spatial.cluster.h5ad \
        --saturation ${outDir}/07T.saturation/plot_200x200_saturation.png \
        --sn ${SN} \
        --species ${refName} \
        --tissue ${tissueType} \
        --rna_tissue_fig ${outDir}/05T.tissuecut/tissue_fig \
        --protein_tissue_fig ${outDir}/05P.tissuecut/tissue_fig \
        --reference ${refName} \
        --pipelineVersion ${pipever} \
        --adt_fastq_name ${adtRead1} \
        --multimomics_spatial ${outDir}/08.multiomics/${SN}_50_spatial_leiden_totalVI_02.png \
        --multimomics_umap ${outDir}/08.multiomics/${SN}_50_UMAP_leiden_totalVI_01.png \
        --multimomics_heatmap ${outDir}/08.multiomics/${SN}_50_matrixplot_Protein_totalVI_04.png \
        --multimomics_bubble  ${outDir}/08.multiomics/${SN}_50_dotplot_RNA_totalVI_03.png \
        -o ${outDir}/09.report
fi

cd ${outDir}
singularity exec ${sif} python3 << CODE
import os
import zipfile
reportdir = "./09.report/AnalysisReport"
file_news = reportdir +'.zip'
z = zipfile.ZipFile(file_news,'w',zipfile.ZIP_DEFLATED)
for dirpath, dirnames, filenames in os.walk(reportdir):
	fpath = dirpath.replace(reportdir,'')
	fpath = fpath and fpath + os.sep or ''
	for filename in filenames:
	  z.write(os.path.join(dirpath, filename),fpath+filename)
	print('zip success')
z.close()
CODE
mv ${outDir}/09.report/AnalysisReport.zip ${outDir}/09.report/${SN}.AnalysisReport.zip

# Organize files required by StereoMap
## 04.register
if [[ -f ${outDir}/04.register/fov_stitched_transformed.rpi ]] || [[ -f ${outDir}/04.register/${SN}.rpi ]] || [[ -f out_iprFile ]]
then
    ln -s ${outDir}/04.register/${SN}.rpi ${outDir}/visualization/${SN}.rpi
    ln -s $out_iprFile ${outDir}/visualization/$(basename "$out_iprFile")
fi

## 05T.tissuecut & 05P.tissuecut
if [[ -f ${outDir}/05T.tissuecut/${SN}.gef ]] || [[ -f ${outDir}/05P.tissuecut/${SN}.protein.gef ]]
then
    ln -s ${outDir}/05T.tissuecut/${SN}.gef ${outDir}/visualization/${SN}.gef
    ln -s ${outDir}/05P.tissuecut/${SN}.protein.gef ${outDir}/visualization/${SN}.protein.gef
fi

out_iprFile=$(find ${outDir}/03.register -maxdepth 1 -name \*.ipr | head -1)
if [[ -n ${out_iprFile} ]] && [[ -e ${out_iprFile} ]]
then
for i in `singularity exec ${sif} h5dump -n $out_iprFile | grep 'Labeling/' | grep -v 'Labeling/.*/Canvas'|grep -v 'Labeling/.*/Element'|awk '{print$2}'`;
do
label=`basename $i`
    if [[ -f ${outDir}/05T.tissuecut/tissuecut_${label}/${SN}.${label}.label.gef ]] || [[ -f ${outDir}/05P.tissuecut/tissuecut_${label}/${SN}.${label}.label.gef ]]
    then
        ln -s ${outDir}/05T.tissuecut/tissuecut_${label}/${SN}.${label}.label.gef ${outDir}/visualization/${SN}.${label}.label.gef
        ln -s ${outDir}/05P.tissuecut/tissuecut_${label}/${SN}.protein.${label}.label.gef ${outDir}/visualization/${SN}.protein.${label}.label.gef
    fi
done
fi

## 051T.cellcut & 051P.cellcut
if [[ -f ${outDir}/051T.cellcut/${SN}.adjusted.cellbin.gef ]] || [[ -f ${outDir}/051P.cellcut/${SN}.protein.adjusted.cellbin.gef ]]
then
    ln -s ${outDir}/051T.cellcut/${SN}.adjusted.cellbin.gef ${outDir}/visualization/${SN}.adjusted.cellbin.gef
    ln -s ${outDir}/051P.cellcut/${SN}.protein.adjusted.cellbin.gef ${outDir}/visualization/${SN}.protein.adjusted.cellbin.gef
fi

## 06T.spatialcluster && 06P.spatialcluster
if [[ -f ${outDir}/06T.spatialcluster/${SN}.bin${binSize}_${resolution}.spatial.cluster.h5ad ]] || [[ -f ${outDir}/06P.spatialcluster/${SN}.protein.bin${binSize}_0.1.spatial.cluster.h5ad ]]
then
    ln -s ${outDir}/06T.spatialcluster/${SN}.bin${binSize}_${resolution}.spatial.cluster.h5ad ${outDir}/visualization/${SN}.bin${binSize}_${resolution}.spatial.cluster.h5ad
    ln -s ${outDir}/06P.spatialcluster/${SN}.protein.bin${binSize}_0.1.spatial.cluster.h5ad ${outDir}/visualization/${SN}.protein.bin${binSize}_0.1.spatial.cluster.h5ad
fi

echo `date` "${SN}.gef and ${SN}.protein.gef have been generated in the current directory: ${outDir} ."
echo `date` "Delete ${SN}.gef and ${SN}.protein.gef if they exist in the previous directory: ${dataDir} to save your storage."
echo `date` " All done! "
