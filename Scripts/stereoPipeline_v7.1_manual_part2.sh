#!/bin/bash
set -e

if [[ $# -lt 12 ]];then
    echo "usage: sh $0 -SN -dataDir -registJson -speciesName -tissueType -outDir -imageRecordFile -imageCompressedFile -doCellBin -threads -sif
    -SN : sample id
    -dataDir : output directory of gene expression matrix result 
    -registJson : manual registration json file
    -speciesName : specie of the sample
    -tissueType : tissue type of the sample
    -outDir : output directory path (Suggest not being in the same directory as the dataDir directory)
    -imageRecordFile : QC-success: image file(*.ipr) found in /dataDir/03.register; QC-failed: image file(*.ipr) generated by ImageStudio software
    -imageCompressedFile : image file(*.tar.gz) generated by ImageStudio software
    -doCellBin : [Y/N]
    -threads : the number of threads to be used in running the pipeline
    -sif : the file format of the visual software
    "
    exit
fi

while [[ -n "$1" ]]
do
    case "$1" in
        -SN) SN="$2"
            shift ;;
        -dataDir) dataDir="$2"
            shift ;;
        -registJson) registJson="$2"
            shift ;;
        -speciesName) refName="$2"
            shift ;;
        -tissueType) tissueType="$2"
            shift ;;
        -outDir) outDir="$2"
            shift ;;
        -imageRecordFile) iprFile="$2"
            shift ;;
        -imageCompressedFile) imageTarFile="$2"
            shift ;;
        -doCellBin) doCell="$2"
            shift ;;
        -threads) threads="$2"
            shift ;;
        -sif) sif="$2"
            shift ;;
    esac
        shift
done


# Software check
if [ `command -v singularity` ]
then
    singularityPath=`command -v singularity`
    echo `date` " singularity check: pass, and singularity path is ${singularityPath}"
else
    echo `date` " singularity check: singularity does not exits, please verify that you have installed singularity and exported it to your system PATH variable"
    exit
fi

if [[ -n $sif ]]
then
    echo `date` " singularity image file check: file exist and SIF path is ${sif}"
else
    echo `date` " singularity image file check: file does not exist, please double check your SIF file is in the current directory or the path given by the option -s is valid."
fi


# Get summary of previous gene expression matrix result
barcodeReadsCounts=${dataDir}/01.merge/${SN}.merge.barcodeReadsCount.txt
starBams=()
bcStat=()
bcFinalOut=()
bcReadsCounts=()

for bam in `find $dataDir -name \*.Aligned.sortedByCoord.out.bam`;do starBams[${#starBams[@]}]=$bam;done
for cidstat in `find $dataDir -name \*CIDMap.stat`;do bcStat[${#bcStat[@]}]=$cidstat;done
for logfinalout in `find $dataDir -name \*.Log.final.out`;do bcFinalOut[${#bcFinalOut[@]}]=$logfinalout;done
for bccount in `find $dataDir -name \*barcodeReadsCount.txt`;do bcReadsCounts[${#bcReadsCounts[@]}]=$bccount;done

if [[ $(echo ${#bcReadsCounts[*]}) == '1' ]]; then
    bcReadsCountsStr=$bcReadsCounts
    starBamsStr=${starBams[0]}
    bcFinalOutStr=${bcFinalOut[0]}
    bcStatStr=${bcStat[0]}
else
    bcReadsCountsStr=$( IFS=','; echo "${bcReadsCounts[*]}" )
    starBamsStr=$( IFS=','; echo "${starBams[*]}" )
    bcFinalOutStr=$( IFS=','; echo "${bcFinalOut[*]}" )
    bcStatStr=$( IFS=','; echo "${bcStat[*]}" )
fi

# Get basic information from JSON
offsetX=`cat ${registJson} | sed 's/,/\n/g' | grep "offsetX" | sed 's/:/\n/g' | sed '1d' | sed 's/}//g'|sed 's/"//g'`
offsetY=`cat ${registJson} | sed 's/,/\n/g' | grep "offsetY" | sed 's/:/\n/g' | sed '1d' | sed 's/}//g'|sed 's/"//g'`
flip=`cat ${registJson} | sed 's/,/\n/g' | grep "flip" | sed 's/:/\n/g' | sed '1d' | sed 's/}//g'|sed 's/"//g'`
rotate=`cat ${registJson} | sed 's/,/\n/g' | grep "rotate" | sed 's/:/\n/g' | sed '1d' | sed 's/}//g'|sed 's/"//g'`
isTunedStr=`cat ${registJson} | sed 's/,/\n/g' | grep "isTuned" | sed 's/:/\n/g' | sed '1d' | sed 's/}//g'|sed 's/"//g'`
extrude_x=`cat ${registJson} | sed 's/,/\n/g' | grep "extrude_x" | sed 's/:/\n/g' | sed '1d' | sed 's/}//g'|sed 's/"//g'`
extrude_y=`cat ${registJson} | sed 's/,/\n/g' | grep "extrude_y" | sed 's/:/\n/g' | sed '1d' | sed 's/}//g'|sed 's/"//g'`

if [[ isTunedStr == 'true' ]];then isTuned='True';else isTuned='False';fi


# Prepare output directories
if [[ $iprFile ]] && [[ $imageTarFile ]];then
    iprDIR=$(dirname $iprFile)
    imgTarDIR=$(dirname $imageTarFile)
fi

if [[ ! -d $outDir ]];then
    mkdir -p $outDir
fi

result_03register=${outDir}/03.register
result_04tissuecut=${outDir}/04.tissuecut
result_05spatialcluster=${outDir}/05.spatialcluster
result_06saturation=${outDir}/06.saturation
result_07report=${outDir}/07.report
result_visualization=${outDir}/visualization
arr_result=( $result_04tissuecut $result_05spatialcluster $result_06saturation $result_07report $result_visualization)
for each in "${arr_result[@]}";
do
    mkdir -p $each
done

if [[ ! -d $result_03register ]];then
    mkdir -p $result_03register
fi

if [[ $doCell == "Y" ]]; then
    result_041cellcut=${outDir}/041.cellcut
    result_051cellcluster=${outDir}/051.cellcluster
    mkdir -p $result_041cellcut
    mkdir -p $result_051cellcluster
fi

## Get original TIFF path, either QCPass or QCFail
if [[ ! -d $dataDir/03.register/manual_register ]];then
    tifDir=$dataDir/03.register
else
	tifDir=$dataDir/03.register/manual_register
fi


# Run SAW register 
## Stitch microscope tile images to a panoramic image, perform tissue and cell (optional, depends on -doCellBin) segmentation, and register the panoramic image and the segmentated images with the gene expression matrix
geneExp=$dataDir/02.count/${SN}.raw.gef
if [[ -f $imageTarFile ]] && [[ -f $iprFile ]]  && [[ $doCell == "Y" ]]; then
    ## Run SAW register (stitch, tissue segmentation, cell segmentation) + SAW imageTools
    echo `date` "=> image processing and registration start......."
    export HDF5_USE_FILE_LOCKING=FALSE
    imgTarDIR=$(dirname $imageTarFile)
    iprDIR=$(dirname $iprFile)
    export SINGULARITY_BIND=$outDir,$imgTarDIR,$iprDIR,$dataDir
    cp -rf ${iprFile} ${result_03register}/${SN}.reregist.ipr
    /usr/bin/time -v singularity exec ${sif} manualRegister \
			-i ${tifDir} \
			-c ${result_03register}/${SN}.reregist.ipr \
			-v ${geneExp} \
			-f $flip \
			-r $rotate \
			-o $offsetX $offsetY \
			-s $extrude_x $extrude_y \
			-a $isTuned \
			-p ${result_03register}

    out_iprFile=$(find ${result_03register} -maxdepth 1 -name \*.ipr | head -1)
    /usr/bin/time -v singularity exec ${sif} imageTools ipr2img \
            -i ${imageTarFile} \
            -c ${out_iprFile} \
            -d tissue cell \
            -r True \
            -o ${result_03register}

elif [[ -f $imageTarFile ]] && [[ -f $iprFile ]]  && [[ $doCell == "N" ]]; then
    # Run SAW rapidRegister (stitch, tissue segmentation) + SAW imageTools
    echo `date` "=> image processing and registration start......."
    export HDF5_USE_FILE_LOCKING=FALSE
    imgTarDIR=$(dirname $imageTarFile)
    iprDIR=$(dirname $iprFile)

    export SINGULARITY_BIND=$outDir,$imgTarDIR,$iprDIR,$dataDir
    cp -rf ${iprFile} ${result_03register}/${SN}.reregist.ipr
    /usr/bin/time -v singularity exec ${sif} manualRegister \
          -i ${tifDir} \
          -c ${result_03register}/${SN}.reregist.ipr \
          -v ${geneExp} \
          -f $flip \
          -r $rotate \
          -o $offsetX $offsetY \
          -s $extrude_x $extrude_y \
          -a $isTuned \
          -p ${result_03register}
			
    out_iprFile=$(find ${result_03register} -maxdepth 1 -name \*.ipr | head -1)
    /usr/bin/time -v singularity exec ${sif} imageTools ipr2img \
            -i ${imageTarFile} \
            -c $out_iprFile \
            -d tissue \
            -r True \
            -o ${result_03register}

fi

# Run SAW tissueCut
echo `date` "=> tissueCut start......."
if [[ -f $imageTarFile ]] && [[ -f $iprFile ]]; then
    ## Run tissueCut to get the spatial gene expression profile of the tissue-covered region
    transformedTif=$(find ${result_03register} -maxdepth 1 -name \*fov_stitched_transformed.tif)
    if [[ -n $transformedTif ]]
    then
        nucleusLayer=$(find ${result_03register} -maxdepth 1 -name \*fov_stitched_transformed.tif -exec sh -c 'for f do basename -- "$f" _fov_stitched_transformed.tif;done' sh {} + | grep -v IF | awk -F_ '{print$1}')
    else
        nucleusLayer=$(find ${result_03register} -maxdepth 1 -name \*fov_stitched.tif -exec sh -c 'for f do basename -- "$f" _fov_stitched.tif;done' sh {} + | grep -v IF | awk -F_ '{print$1}')
    fi
    tissueMaskFile=$(find ${result_03register} -maxdepth 1 -name ${nucleusLayer}_${SN}_tissue_cut.tif)

    export HDF5_USE_FILE_LOCKING=FALSE
    export SINGULARITY_BIND=$outDir,$dataDir
    /usr/bin/time -v singularity exec ${sif} tissueCut \
        -i ${geneExp} \
        --dnbfile ${barcodeReadsCounts} \
        -s ${tissueMaskFile} \
        --sn ${SN} \
        -O Transcriptomics \
        -d -t 8 \
        -o ${result_04tissuecut}
    
    /usr/bin/time -v singularity exec ${sif} cellCut bgef \
        -i ${result_04tissuecut}/${SN}.tissue.gef \
        -o ${result_04tissuecut}/${SN}.${nucleusLayer}.gef \
        -O Transcriptomics \
        -b 1,5,10,20,50,100,150,200
    
    for i in `singularity exec ${sif} h5dump -n ${result_03register}/${SN}.reregist.ipr | grep 'Labeling/' | grep -v 'Labeling/.*/Canvas'|grep -v 'Labeling/.*/Element'|awk '{print$2}'`;
    do
    label=`basename $i`
    mkdir -p ${result_04tissuecut}/tissuecut_${label}
    labelmask=$(find ${result_03register} -name \*${label}_tissue_cut.tif)
    echo $labelmask
    /usr/bin/time -v singularity exec ${sif} tissueCut \
        -l $label \
        -i ${geneExp} \
        --dnbfile ${barcodeReadsCounts} \
        -s ${labelmask} \
        --sn ${SN} \
        -O Transcriptomics \
        -d -t 8 \
        -o ${result_04tissuecut}/tissuecut_${label}
    done
else
    ## Run SAW tissueCut based on the gene expression matrix directly
    export SINGULARITY_BIND=$outDir,$refDIR,$dataDir
    echo `date` "=> there is no image, tissueCut based on the gene expression matrix start......."
    export HDF5_USE_FILE_LOCKING=FALSE
    /usr/bin/time -v singularity exec ${sif} tissueCut \
        -i ${geneExp} \
        --dnbfile ${barcodeReadsCounts} \
        --sn ${SN} \
        -O Transcriptomics \
        -d -t 8 \
        -o ${result_04tissuecut}
fi


# Complete raw GEF to visual GEF
export HDF5_USE_FILE_LOCKING=FALSE
/usr/bin/time -v singularity exec ${sif} cellCut bgef \
    -i ${geneExp} \
    -o ${result_04tissuecut}/${SN}.gef \
    -O Transcriptomics
	
# Complete raw labeled tissue GEF to visual GEF
if [[ -f $imageTarFile ]] && [[ -f $iprFile ]]; then
  for i in `singularity exec ${sif} h5dump -n ${result_03register}/${SN}.reregist.ipr | grep 'Labeling/' | grep -v 'Labeling/.*/Canvas'|grep -v 'Labeling/.*/Element'|awk '{print$2}'`;
  do
  label=`basename $i`
  export HDF5_USE_FILE_LOCKING=FALSE
  /usr/bin/time -v singularity exec ${sif} cellCut bgef \
    -i ${result_04tissuecut}/tissuecut_${label}/${SN}.${label}.raw.label.gef \
    -o ${result_04tissuecut}/tissuecut_${label}/${SN}.${label}.label.gef \
    -O Transcriptomics
  done
fi

## Convert GEF to GEM [optional]
/usr/bin/time -v singularity exec ${sif} cellCut view \
    -s ${SN} \
    -i ${result_04tissuecut}/${SN}.gef \
    -o ${result_04tissuecut}/${SN}.gem
gzip ${result_04tissuecut}/${SN}.gem
/usr/bin/time -v singularity exec ${sif} cellCut view \
    -s ${SN} \
    -i ${result_04tissuecut}/${SN}.tissue.gef \
    -o ${result_04tissuecut}/${SN}.tissue.gem
gzip ${result_04tissuecut}/${SN}.tissue.gem


# Run spatialCluster
export SINGULARITY_BIND=$outDir,$dataDir
echo `date` "=> spatialCluster start......."
export HDF5_USE_FILE_LOCKING=FALSE
mkdir -p ${outDir}/tmp
export NUMBA_CACHE_DIR=${outDir}/tmp
export MPLCONFIGDIR=${outDir}/tmp
binSize=200
resolution=1.0
/usr/bin/time -v singularity exec ${sif} spatialCluster \
    -i ${result_04tissuecut}/${SN}.tissue.gef \
    -o ${result_05spatialcluster}/${SN}.bin${binSize}_${resolution}.spatial.cluster.h5ad \
    -s ${binSize} \
    -r ${resolution}

## output labeled spatial H5AD [optional]
#for i in `singularity exec ${sif} h5dump -n ${result_03register}/${SN}.reregist.ipr | grep 'Labeling/' | grep -v 'Labeling/.*/Canvas'|grep -v 'Labeling/.*/Element'|awk '{print$2}'`;
#do
#label=`basename $i`
#echo $labelmask
#export HDF5_USE_FILE_LOCKING=FALSE
#/usr/bin/time -v singularity exec ${sif} spatialCluster \
#   -i ${outDir}/04.tissuecut/tissuecut_${label}/${SN}.${label}.label.gef \
#   -s ${binSize} \
#   -r ${resolution} \
#   -o ${outDir}/05.spatialcluster/${SN}.${label}.bin${binSize}_${resolution}.spatial.cluster.h5ad
#done

# Run cellCut, cellCorrect, cellCluster and cellChunk
export SINGULARITY_BIND=$outDir,$dataDir
if [[ -f $imageTarFile ]] && [[ -f $iprFile ]]  && [[ $doCell == "Y" ]]; then
	## Run SAW cellCut
    echo `date` "=> cellCut start......."
    export HDF5_USE_FILE_LOCKING=FALSE

    transformedTif=$(find ${outDir}/03.register -maxdepth 1 -name \*fov_stitched_transformed.tif)
    if [[ -n $transformedTif ]]
    then
        nucleusLayer=$(find ${outDir}/03.register -maxdepth 1 -name \*fov_stitched_transformed.tif -exec sh -c 'for f do basename -- "$f" _fov_stitched_transformed.tif;done' sh {} + | grep -v IF | awk -F_ '{print$1}')
    else
        nucleusLayer=$(find ${outDir}/03.register -maxdepth 1 -name \*fov_stitched.tif -exec sh -c 'for f do basename -- "$f" _fov_stitched.tif;done' sh {} + | grep -v IF | awk -F_ '{print$1}')
    fi
    nucleusMask=$(find ${outDir}/03.register -maxdepth 1 -name ${nucleusLayer}_${SN}_mask.tif)

    /usr/bin/time -v singularity exec ${sif} cellCut cgef \
        -i ${geneExp} \
        -m ${nucleusMask} \
        -o ${result_041cellcut}/${SN}.cellbin.gef

	## Run SAW cellCorrect
    echo `date` "=> cellCorrect start......."
    export HDF5_USE_FILE_LOCKING=FALSE
    /usr/bin/time -v singularity exec ${sif} cellCorrect \
            -i ${dataDir}/02.count/${SN}.raw.gef \
            -m ${nucleusMask} \
            -d 10 \
            -o ${result_041cellcut}

    ## Write the adjusted mask image into SN.rpi
    cellCorrectMask=$(find ${result_041cellcut} -maxdepth 1 -name ${nucleusLayer}_${SN}_mask_edm_dis\*.tif)
    /usr/bin/time -v singularity exec ${sif} imageTools img2rpi \
        -i ${cellCorrectMask} \
        -g ${nucleusLayer}/CellMask_adjusted \
        -b 2 10 50 100 150 \
        -o ${result_03register}/${SN}.rpi

	## Run SAW cellCluster
    echo `date` "=> cellCluster start......."
    mkdir -p ${outDir}/tmp
    export NUMBA_CACHE_DIR=${outDir}/tmp
    export MPLCONFIGDIR=${outDir}/tmp
    /usr/bin/time -v singularity exec ${sif} cellCluster \
        -i ${outDir}/041.cellcut/${SN}.adjusted.cellbin.gef \
        -o ${outDir}/051.cellcluster/${SN}.adjusted.cell.cluster.h5ad
	
	/usr/bin/time -v singularity exec ${sif} cellCluster \
        -i ${outDir}/041.cellcut/${SN}.cellbin.gef \
        -o ${outDir}/051.cellcluster/${SN}.cell.cluster.h5ad

  ## Run SAW cellChunk to write rendering data into cellbin.gef
  echo `date` "=> cellChunk start......."
  /usr/bin/time -v singularity exec ${sif} cellChunk \
      -i ${result_041cellcut}/${SN}.adjusted.cellbin.gef \
      -o ${result_041cellcut}

  /usr/bin/time -v singularity exec ${sif} cellChunk \
      -i ${result_041cellcut}/${SN}.cellbin.gef \
      -o ${result_041cellcut}
fi


# Run saturation
export SINGULARITY_BIND=$outDir,$dataDir
echo `date` "=> saturation start ......"
export HDF5_USE_FILE_LOCKING=FALSE
saturationFile=${dataDir}/02.count/${SN}_raw_barcode_gene_exp.txt
/usr/bin/time -v singularity exec ${sif} saturation \
    -i ${saturationFile} \
    --tissue ${result_04tissuecut}/${SN}.tissue.gef \
    -o ${result_06saturation} \
    --bcstat ${bcStatStr} \
    --summary ${dataDir}/02.count/${SN}.Aligned.sortedByCoord.out.merge.q10.dedup.target.bam.summary.stat


# Run report to generate HTML report
echo `date` "=> report generation start......"
export HDF5_USE_FILE_LOCKING=FALSE
export SINGULARITY_BIND=$outDir,$dataDir
out_iprFile=$(find ${result_03register} -maxdepth 1 -name \*.ipr | head -1)
pipever=$(basename ${sif} .sif)

if [[ -n ${out_iprFile} ]] && [[ -e ${out_iprFile} ]] && [[ $doCell == 'Y' ]]; then
    /usr/bin/time -v singularity exec ${sif} report \
        -m ${bcStatStr} \
        -a ${bcFinalOutStr} \
        -g ${dataDir}/02.count/${SN}.Aligned.sortedByCoord.out.merge.q10.dedup.target.bam.summary.stat \
        -l ${result_04tissuecut}/tissuecut.stat \
        -n ${result_04tissuecut}/${SN}.gef \
        -i ${result_03register}/${SN}.rpi \
        -d ${result_05spatialcluster}/${SN}.bin${binSize}_${resolution}.spatial.cluster.h5ad \
        -t ${result_06saturation}/plot_200x200_saturation.png \
        -b ${result_04tissuecut}/tissue_fig/scatter_200x200_MID_gene_counts.png \
        -v ${result_04tissuecut}/tissue_fig/violin_200x200_MID_gene.png \
        -c ${result_04tissuecut}/tissue_fig/statistic_200x200_MID_gene_DNB.png \
        --bin20Saturation ${result_04tissuecut}/tissue_fig/scatter_20x20_MID_gene_counts.png \
        --bin20violin ${result_04tissuecut}/tissue_fig/violin_20x20_MID_gene.png \
        --bin20MIDGeneDNB ${result_04tissuecut}/tissue_fig/statistic_20x20_MID_gene_DNB.png \
        --bin50Saturation ${result_04tissuecut}/tissue_fig/scatter_50x50_MID_gene_counts.png \
        --bin50violin ${result_04tissuecut}/tissue_fig/violin_50x50_MID_gene.png \
        --bin50MIDGeneDNB ${result_04tissuecut}/tissue_fig/statistic_50x50_MID_gene_DNB.png \
        --bin100Saturation ${result_04tissuecut}/tissue_fig/scatter_100x100_MID_gene_counts.png \
        --bin100violin ${result_04tissuecut}/tissue_fig/violin_100x100_MID_gene.png \
        --bin100MIDGeneDNB ${result_04tissuecut}/tissue_fig/statistic_100x100_MID_gene_DNB.png \
        --bin150Saturation ${result_04tissuecut}/tissue_fig/scatter_150x150_MID_gene_counts.png \
        --bin150violin ${result_04tissuecut}/tissue_fig/violin_150x150_MID_gene.png \
        --bin150MIDGeneDNB ${result_04tissuecut}/tissue_fig/statistic_150x150_MID_gene_DNB.png \
        --cellBinGef ${result_041cellcut}/${SN}.adjusted.cellbin.gef \
        --cellCluster ${result_051cellcluster}/${SN}.adjusted.cell.cluster.h5ad \
        --iprFile ${out_iprFile} \
        --pipelineVersion ${pipever} \
        -s ${SN} \
        --species ${refName} \
        --tissue ${tissueType} \
        --reference ${refName} \
        -o ${result_07report}
elif [[ -n ${out_iprFile} ]] && [[ -e ${out_iprFile} ]] && [[ $doCell == 'N' ]]; then
    /usr/bin/time -v singularity exec ${sif} report \
        -m ${bcStatStr} \
        -a ${bcFinalOutStr} \
        -g ${dataDir}/02.count/${SN}.Aligned.sortedByCoord.out.merge.q10.dedup.target.bam.summary.stat \
        -l ${result_04tissuecut}/tissuecut.stat \
        -n ${result_04tissuecut}/${SN}.gef \
        -i ${result_03register}/${SN}.rpi \
        -d ${result_05spatialcluster}/${SN}.bin${binSize}_${resolution}.spatial.cluster.h5ad \
        -t ${result_06saturation}/plot_200x200_saturation.png \
        -b ${result_04tissuecut}/tissue_fig/scatter_200x200_MID_gene_counts.png \
        -v ${result_04tissuecut}/tissue_fig/violin_200x200_MID_gene.png \
        -c ${result_04tissuecut}/tissue_fig/statistic_200x200_MID_gene_DNB.png \
        --bin20Saturation ${result_04tissuecut}/tissue_fig/scatter_20x20_MID_gene_counts.png \
        --bin20violin ${result_04tissuecut}/tissue_fig/violin_20x20_MID_gene.png \
        --bin20MIDGeneDNB ${result_04tissuecut}/tissue_fig/statistic_20x20_MID_gene_DNB.png \
        --bin50Saturation ${result_04tissuecut}/tissue_fig/scatter_50x50_MID_gene_counts.png \
        --bin50violin ${result_04tissuecut}/tissue_fig/violin_50x50_MID_gene.png \
        --bin50MIDGeneDNB ${result_04tissuecut}/tissue_fig/statistic_50x50_MID_gene_DNB.png \
        --bin100Saturation ${result_04tissuecut}/tissue_fig/scatter_100x100_MID_gene_counts.png \
        --bin100violin ${result_04tissuecut}/tissue_fig/violin_100x100_MID_gene.png \
        --bin100MIDGeneDNB ${result_04tissuecut}/tissue_fig/statistic_100x100_MID_gene_DNB.png \
        --bin150Saturation ${result_04tissuecut}/tissue_fig/scatter_150x150_MID_gene_counts.png \
        --bin150violin ${result_04tissuecut}/tissue_fig/violin_150x150_MID_gene.png \
        --bin150MIDGeneDNB ${result_04tissuecut}/tissue_fig/statistic_150x150_MID_gene_DNB.png \
        --iprFile ${out_iprFile} \
        --pipelineVersion ${pipever} \
        -s ${SN} \
        --species ${refName} \
        --tissue ${tissueType} \
        --reference ${refName} \
        -o ${result_07report}
else
    /usr/bin/time -v singularity exec ${sif} report \
        -m ${bcStatStr} \
        -a ${bcFinalOutStr} \
        -g ${dataDir}/02.count/${SN}.Aligned.sortedByCoord.out.merge.q10.dedup.target.bam.summary.stat \
        -l ${result_04tissuecut}/tissuecut.stat \
        -n ${result_04tissuecut}/${SN}.gef \
        -d ${result_05spatialcluster}/${SN}.bin${binSize}_${resolution}.spatial.cluster.h5ad \
        -t ${result_06saturation}/plot_200x200_saturation.png \
        -b ${result_04tissuecut}/tissue_fig/scatter_200x200_MID_gene_counts.png \
        -v ${result_04tissuecut}/tissue_fig/violin_200x200_MID_gene.png \
        -c ${result_04tissuecut}/tissue_fig/statistic_200x200_MID_gene_DNB.png \
        --bin20Saturation ${result_04tissuecut}/tissue_fig/scatter_20x20_MID_gene_counts.png \
        --bin20violin ${result_04tissuecut}/tissue_fig/violin_20x20_MID_gene.png \
        --bin20MIDGeneDNB ${result_04tissuecut}/tissue_fig/statistic_20x20_MID_gene_DNB.png \
        --bin50Saturation ${result_04tissuecut}/tissue_fig/scatter_50x50_MID_gene_counts.png \
        --bin50violin ${result_04tissuecut}/tissue_fig/violin_50x50_MID_gene.png \
        --bin50MIDGeneDNB ${result_04tissuecut}/tissue_fig/statistic_50x50_MID_gene_DNB.png \
        --bin100Saturation ${result_04tissuecut}/tissue_fig/scatter_100x100_MID_gene_counts.png \
        --bin100violin ${result_04tissuecut}/tissue_fig/violin_100x100_MID_gene.png \
        --bin100MIDGeneDNB ${result_04tissuecut}/tissue_fig/statistic_100x100_MID_gene_DNB.png \
        --bin150Saturation ${result_04tissuecut}/tissue_fig/scatter_150x150_MID_gene_counts.png \
        --bin150violin ${result_04tissuecut}/tissue_fig/violin_150x150_MID_gene.png \
        --bin150MIDGeneDNB ${result_04tissuecut}/tissue_fig/statistic_150x150_MID_gene_DNB.png \
        --pipelineVersion ${pipever} \
        -s ${SN} \
        --species ${refName} \
        --tissue ${tissueType} \
        --reference ${refName} \
        -o ${result_07report}
fi

# Organize files required by StereoMap
## 03.register
if [[ -f $result_03register/${SN}.rpi ]] || [[ -f out_iprFile ]]
then
    ln -s $result_03register/${SN}.rpi $result_visualization/${SN}.rpi
    ln -s $out_iprFile $result_visualization/$(basename "$out_iprFile")
fi

## 04.tissuecut
if [[ -f $result_04tissuecut/${SN}.gef ]]
then
    ln -s $result_04tissuecut/${SN}.gef $result_visualization/${SN}.gef
fi
for i in `singularity exec ${sif} h5dump -n ${result_03register}/${SN}.reregist.ipr | grep 'Labeling/' | grep -v 'Labeling/.*/Canvas'|grep -v 'Labeling/.*/Element'|awk '{print$2}'`;
do
label=`basename $i`
	if [[ -f $result_04tissuecut/tissuecut_${label}/${SN}.${label}.label.gef ]]
	then
		ln -s $result_04tissuecut/tissuecut_${label}/${SN}.${label}.label.gef $result_visualization/${SN}.${label}.label.gef
	fi
done

## 041.cellcut
if [[ -f $result_041cellcut/${SN}.adjusted.cellbin.gef ]]
then
    ln -s $result_041cellcut/${SN}.adjusted.cellbin.gef $result_visualization/${SN}.adjusted.cellbin.gef
fi

## 05.spatialCluster
if [[ -f $result_05spatialcluster/${SN}.bin${binSize}_${resolution}.spatial.cluster.h5ad ]]
then
    ln -s $result_05spatialcluster/${SN}.bin${binSize}_${resolution}.spatial.cluster.h5ad $result_visualization/${SN}.bin${binSize}_${resolution}.spatial.cluster.h5ad
fi

#for i in `singularity exec ${sif} h5dump -n ${result_03register}/${SN}.reregist.ipr | grep 'Labeling/' | grep -v 'Labeling/.*/Canvas'|grep -v 'Labeling/.*/Element'|awk '{print$2}'`;
#do
#label=`basename $i`
#    if [[ -f $result_05spatialcluster/${SN}.${label}.bin${binSize}_${resolution}.spatial.cluster.h5ad ]]
#    then
#        ln -s $result_05spatialcluster/${SN}.${label}.bin${binSize}_${resolution}.spatial.cluster.h5ad $result_visualization/${SN}.${label}.bin${binSize}_${resolution}.spatial.cluster.h5ad
#    fi
#done

## 051.cellCluster
if [[ -f $result_051cellcluster/${SN}.cell.cluster.h5ad ]]
then
    ln -s $result_051cellcluster/${SN}.cell.cluster.h5ad $result_visualization/${SN}.cell.cluster.h5ad
fi
echo `date` " All done! "
